datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(USER)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  TestReading TestReading[]
  ExamResult ExamResult[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

enum UserRole {
  ADMIN
  USER
}

model TestReading {
  level LevelReading @id 
  title String
  time Int
  story String  @db.Text
  adminId String
  user User @relation( fields: [adminId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exam {
  level          LevelReading     @id 
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  ExamResult ExamResult[]
}

model Question {
  id             String   @id @default(uuid())
  exam           Exam     @relation(fields: [examId], references: [level], onDelete: Cascade)
  examId         LevelReading
  questionText   String
  optionA        String
  optionB        String
  optionC        String
  optionD        String
  correctAnswer  CorrrectAnswer?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([examId])
}

model ExamResult {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  exam       Exam      @relation(fields: [examId], references: [level], onDelete: Cascade)
  examId     LevelReading
  answers    Json      // Store the answers as JSON, e.g., { "Q1": "A", "Q2": "C" }
  score      Int
  submittedAt DateTime @default(now())
}

model QuizResult {
  id String @id @default(uuid())
  name String
  class Int
  count Int
  quiz Int
  type String
  submittedAt DateTime @default(now())
}

enum CorrrectAnswer {
  A
  B
  C
  D
}


enum LevelReading {
  Pemula
  Menengah
  Lanjutan
}